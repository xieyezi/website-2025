---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostNavigation from '../../components/PostNavigation.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';
import { locales } from '../../i18n';
import siteConfig from '../../data/site-config';
import ArrowRight from '../../icons/ArrowRight.astro';
import ArrowLeft from '../../icons/ArrowLeft.astro';

const i18n = locales[siteConfig.locale];

export async function getStaticPaths() {
    const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { id: post.id },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> };

const { href } = Astro.url;
const { post } = Astro.props;
const { title, publishDate, updatedDate, excerpt, tags = [], seo } = post.data;
const { Content } = await render(post);
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image} pageType="article" showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-2xl leading-tight font-serif font-bold sm:text-4xl sm:leading-tight">{title}</h1>
            <div class="mt-4 text-sm">
                <FormattedDate date={publishDate} />
                {
                    updatedDate && (
                        <>
                            {' '}
                            <span>
                                ({i18n.pages.blog.updated} <FormattedDate date={updatedDate} />)
                            </span>
                        </>
                    )
                }
            </div>
        </header>
        <div class="max-w-none prose prose-dante sm:prose-lg">
            <Content />
        </div>
        <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
            {
                tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag) => (
                            <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                                #{tag}
                            </a>
                        ))}
                    </div>
                )
            }
            <Button
                class="copy-url-button"
                aria-label={i18n.pages.blog.copyLink}
                data-url={href}
                data-tooltip-default={i18n.pages.blog.copyLink}
                data-tooltip-success={i18n.pages.blog.copied}
            >
                {i18n.pages.blog.share}
            </Button>
        </div>
    </article>

    <!-- 使用新的导航组件 -->
    <PostNavigation
        prevItem={Astro.props.prevPost}
        nextItem={Astro.props.nextPost}
        prevLabel={i18n.pages.blog.prevPost}
        nextLabel={i18n.pages.blog.nextPost}
        basePath="blog"
    />

    <section class="giscus mx-auto mt-10 w-full" id="giscus-container"></section>
</BaseLayout>
<script>
    import { theme } from '../../store/theme';
    import { locales } from '../../i18n';
    import siteConfig from '../../data/site-config';
    import { getGiscusLang } from '../../utils/common-utils';

    const i18n = locales[siteConfig.locale];
    let unsubscribe: (() => void) | null = null;
    // 加载 Giscus 脚本
    function loadGiscus() {
        // 清除现有的 Giscus
        const container = document.getElementById('giscus-container');
        if (container) {
            container.innerHTML = '';
        }

        // 获取当前主题
        const currentTheme = theme.get();
        const giscusTheme = currentTheme === 'dark' ? 'noborder_gray' : 'noborder_light';

        // 创建 Giscus 脚本
        const script = document.createElement('script');
        script.src = 'https://giscus.app/client.js';
        script.setAttribute('data-repo', siteConfig.giscus.repo);
        script.setAttribute('data-repo-id', siteConfig.giscus.repoId);
        script.setAttribute('data-category', siteConfig.giscus.category);
        script.setAttribute('data-category-id', siteConfig.giscus.categoryId);
        script.setAttribute('data-mapping', siteConfig.giscus.mapping);
        script.setAttribute('data-strict', siteConfig.giscus.strict);
        script.setAttribute('data-reactions-enabled', siteConfig.giscus.reactionsEnabled);
        script.setAttribute('data-emit-metadata', siteConfig.giscus.emitMetadata);
        script.setAttribute('data-input-position', siteConfig.giscus.inputPosition);
        script.setAttribute('data-theme', giscusTheme);
        script.setAttribute('data-lang', getGiscusLang(siteConfig.locale));
        script.crossOrigin = 'anonymous';
        script.async = true;

        // 添加到容器
        container?.appendChild(script);
    }
    // 监听主题变化，更新 giscus 主题
    function updateGiscusTheme(theme: 'light' | 'dark') {
        const iframe = document.querySelector<HTMLIFrameElement>('iframe.giscus-frame');
        if (!iframe) return;

        const message = {
            giscus: {
                setConfig: {
                    theme: theme === 'dark' ? 'noborder_gray' : 'noborder_light'
                }
            }
        };

        iframe.contentWindow?.postMessage(message, 'https://giscus.app');
    }

    document.addEventListener('astro:page-load', () => {
        if (unsubscribe) {
            unsubscribe();
        }
        // 加载 Giscus
        loadGiscus();

        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
        copyUrlButton?.addEventListener('click', async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute('data-url') || '';
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = i18n.pages.blog.copied;

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }

        // 监听主题变化
        unsubscribe = theme.subscribe((newTheme) => {
            updateGiscusTheme(newTheme);
        });
    });

    // 在页面卸载时取消订阅
    document.addEventListener('astro:before-swap', () => {
        if (unsubscribe) {
            unsubscribe();
            unsubscribe = null;
        }
    });
</script>
